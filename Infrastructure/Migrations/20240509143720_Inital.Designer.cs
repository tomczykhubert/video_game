// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(VideoGamesDbContext))]
    [Migration("20240509143720_Inital")]
    partial class Inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("video_games")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.GameEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("game_name");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("game", "video_games");
                });

            modelBuilder.Entity("Core.Entities.GamePlatformEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GamePublisherId")
                        .HasColumnType("integer")
                        .HasColumnName("game_publisher_id");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer")
                        .HasColumnName("platform_id");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer")
                        .HasColumnName("release_year");

                    b.HasKey("Id");

                    b.HasIndex("GamePublisherId");

                    b.HasIndex("PlatformId");

                    b.ToTable("game_platform", "video_games");
                });

            modelBuilder.Entity("Core.Entities.GamePublisherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer")
                        .HasColumnName("publisher_id");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PublisherId");

                    b.ToTable("game_publisher", "video_games");
                });

            modelBuilder.Entity("Core.Entities.GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("genre_name");

                    b.HasKey("Id");

                    b.ToTable("genre", "video_games");
                });

            modelBuilder.Entity("Core.Entities.PlatformEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("platform_name");

                    b.HasKey("Id");

                    b.ToTable("platform", "video_games");
                });

            modelBuilder.Entity("Core.Entities.PublisherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("publisher_name");

                    b.HasKey("Id");

                    b.ToTable("publisher", "video_games");
                });

            modelBuilder.Entity("Core.Entities.RegionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("region_name");

                    b.HasKey("Id");

                    b.ToTable("region", "video_games");
                });

            modelBuilder.Entity("Core.Entities.RegionSalesEntity", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<int>("GamePlatformId")
                        .HasColumnType("integer")
                        .HasColumnName("game_platform_id");

                    b.Property<decimal>("NumberOfSales")
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("num_sales");

                    b.HasKey("RegionId", "GamePlatformId");

                    b.HasIndex("GamePlatformId");

                    b.ToTable("region_sales", "video_games");
                });

            modelBuilder.Entity("Core.Entities.GameEntity", b =>
                {
                    b.HasOne("Core.Entities.GenreEntity", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Core.Entities.GamePlatformEntity", b =>
                {
                    b.HasOne("Core.Entities.GamePublisherEntity", "GamePublisher")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("GamePublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.PlatformEntity", "Platform")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GamePublisher");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Core.Entities.GamePublisherEntity", b =>
                {
                    b.HasOne("Core.Entities.GameEntity", "Game")
                        .WithMany("GamesPublishers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.PublisherEntity", "Publisher")
                        .WithMany("GamesPublishers")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Core.Entities.RegionSalesEntity", b =>
                {
                    b.HasOne("Core.Entities.GamePlatformEntity", "GamePlatform")
                        .WithMany("RegionSales")
                        .HasForeignKey("GamePlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.RegionEntity", "Region")
                        .WithMany("RegionSales")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GamePlatform");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Core.Entities.GameEntity", b =>
                {
                    b.Navigation("GamesPublishers");
                });

            modelBuilder.Entity("Core.Entities.GamePlatformEntity", b =>
                {
                    b.Navigation("RegionSales");
                });

            modelBuilder.Entity("Core.Entities.GamePublisherEntity", b =>
                {
                    b.Navigation("GamesPlatforms");
                });

            modelBuilder.Entity("Core.Entities.GenreEntity", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Core.Entities.PlatformEntity", b =>
                {
                    b.Navigation("GamesPlatforms");
                });

            modelBuilder.Entity("Core.Entities.PublisherEntity", b =>
                {
                    b.Navigation("GamesPublishers");
                });

            modelBuilder.Entity("Core.Entities.RegionEntity", b =>
                {
                    b.Navigation("RegionSales");
                });
#pragma warning restore 612, 618
        }
    }
}
